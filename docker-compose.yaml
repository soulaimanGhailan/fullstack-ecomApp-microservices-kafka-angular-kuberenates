version: '3.8'
services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=product-db

  mongo-express:
    depends_on:
      - mongodb
    image: mongo-express:latest
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
  kafka:
      image: wurstmeister/kafka
      container_name: kafka
      ports:
        - "9092:9092"
      environment:
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_HOST_NAME: 10.10.9.142
        KAFKA_CREATE_TOPICS: "R1"

#  postgres-service:
#    image: postgres
#    container_name: postgres-service
#    environment:
#     POSTGRES_DB: keycloak_db
#     POSTGRES_USER: keycloak
#     POSTGRES_PASSWORD: k1234
#    ports:
#    - '5432:5432'
#    expose:
#     - '5432'
#    healthcheck:
#     test: "exit 0"
#  pgadmin4:
#    image: dpage/pgadmin4
#    container_name: pgadmin4
#    restart: always
#    ports:
#      - "8888:80"
#    environment:
#      PGADMIN_DEFAULT_EMAIL: xxxx@gmail.com
#      PGADMIN_DEFAULT_PASSWORD: azer
#    volumes:
#      - pgadmin_data:/var/lib/pgadmin
#  keycloak:
#    image: quay.io/keycloak/keycloak:latest
#    environment:
#      KC_DB: postgres
#      KC_DB_URL: jdbc:postgresql://postgres-service:5432/keycloak_db
#      KC_DB_USERNAME: keycloak
##      KC_HOSTNAME: 0.0.0.0
#      KC_DB_PASSWORD: k1234
#      KEYCLOAK_ADMIN: admin
#      KC_HTTP_ENABLED: "true"
#      KC_HOSTNAME_STRICT_HTTPS: "false"
#      KEYCLOAK_ADMIN_PASSWORD: admin
#    command:
#      - start-dev
#    restart: always
#    ports:
#      - '8080:8080'
#    expose:
#      - '8080'
#    depends_on:
#      - postgres-service

#  product-service:
#    image: soulaimandockerhub/ecom-backend-product-service:v1
#    container_name: product-service
#    ports:
#      - '8080:8080'
#    expose:
#      - '8080'
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
#      interval: 10s
#      retries: 20
#    depends_on:
#        - mongodb
#    environment:
#      - MONGODB_HOST=mongodb
#  customer-service:
#    image: soulaimandockerhub/ecom-backend-customer-service:v1
#    container_name: customer-service
#    ports:
#      - '8081:8081'
#    expose:
#      - '8081'
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
#      interval: 10s
#      retries: 20
#    depends_on:
#        - mongodb
#    environment:
#      - PRODUCT_SERVICE_URL=http://product-service:8080
#      - MONGODB_HOST=mongodb
#  ecom-fron:
#    build: ./ecom-front
#    container_name: ecom-front
#    ports:
#      - '4200:80'
#    expose:
#        - '4200'
#    environment:
#      - productService=http://product-service:8080
#      - customerService=http://customer-service:8081
#    depends_on:
#      customer-service:
#          condition: service_healthy
#      product-service:
#        condition: service_healthy